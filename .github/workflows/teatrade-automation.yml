name: TeaTrade Enterprise Automation System

on:
  workflow_dispatch:
    inputs:
      run_mode:
        description: 'Select automation mode'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - test-only
          - database-only
      
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

  schedule:
    - cron: '0 6 * * *'

jobs:
  teatrade-enterprise-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: secure_password_123
          POSTGRES_USER: tea_admin
          POSTGRES_DB: tea_trade_data
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Install Python Dependencies
        run: |
          pip install --upgrade pip
          pip install -r automation/requirements.txt
          pip install flask flask-cors psycopg2-binary
      
      - name: Initialize Database
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: tea_admin
          PGPASSWORD: secure_password_123
          PGDATABASE: tea_trade_data
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U tea_admin; do
            echo "Waiting for database..."
            sleep 2
          done
          
          echo "Setting up database schema..."
          psql -h localhost -U tea_admin -d tea_trade_data -f automation/data_warehouse/schema.sql
          
          echo "Database initialized successfully"
      
      - name: Run Enterprise Automation System
        env:
          GITHUB_ACTIONS: true
          RUN_MODE: ${{ github.event.inputs.run_mode || 'full' }}
          DEBUG_MODE: ${{ github.event.inputs.debug_mode || 'false' }}
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: tea_admin
          DB_PASSWORD: secure_password_123
          DB_NAME: tea_trade_data
        run: |
          echo "Starting TeaTrade Enterprise Automation..."
          echo "Mode: $RUN_MODE"
          echo "Debug: $DEBUG_MODE"
          
          cd automation
          python run_complete_automation.py
          
          echo "Enterprise automation completed"
      
      - name: Export Data for Website
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: tea_admin
          PGPASSWORD: secure_password_123
          PGDATABASE: tea_trade_data
        run: |
          echo "Exporting data for website..."
          mkdir -p data/latest
          
          # Export auction data
          psql -h localhost -U tea_admin -d tea_trade_data -c "
          COPY (
            SELECT jsonb_agg(
              jsonb_build_object(
                'lot_no', al.lot_no,
                'location', ac.centre_name,
                'garden_name', al.garden_name,
                'grade', al.grade,
                'price', al.price,
                'price_usd', al.price_usd,
                'quantity', al.quantity,
                'currency', al.currency,
                'auction_date', al.auction_date,
                'broker', al.broker
              )
            ) FROM auction_lots al 
            JOIN auction_centres ac ON al.centre_id = ac.id 
            WHERE al.auction_date >= CURRENT_DATE - INTERVAL '7 days'
          ) TO STDOUT
          " > data/latest/auction_data.json
          
          # Export news data
          psql -h localhost -U tea_admin -d tea_trade_data -c "
          COPY (
            SELECT jsonb_agg(
              jsonb_build_object(
                'title', title,
                'source', source,
                'url', url,
                'summary', summary,
                'publish_date', publish_date,
                'category', category,
                'importance', importance
              )
            ) FROM news_articles 
            WHERE publish_date >= CURRENT_DATE - INTERVAL '7 days'
          ) TO STDOUT
          " > data/latest/news_data.json
          
          # Generate summary
          python3 -c "
import json
from datetime import datetime
summary = {
  'last_updated': datetime.now().isoformat() + 'Z',
  'status': 'production',
  'enterprise_mode': True,
  'database_enabled': True,
  'api_enabled': True,
  'run_mode': '${{ github.event.inputs.run_mode || 'full' }}',
  'collection_time': datetime.now().strftime('%Y-%m-%d %H:%M UTC')
}
with open('data/latest/summary.json', 'w') as f:
  json.dump(summary, f, indent=2)
          "
          
          echo "Data export completed"
      
      - name: Generate Enterprise Report
        run: |
          echo "## TeaTrade Enterprise Automation Report" >> $GITHUB_STEP_SUMMARY
          echo "=========================================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Execution Time**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Mode**: ${{ github.event.inputs.run_mode || 'scheduled' }}" >> $GITHUB_STEP_SUMMARY
          echo "**System Type**: Enterprise with PostgreSQL Database" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Enterprise Features**:" >> $GITHUB_STEP_SUMMARY
          echo "- PostgreSQL data warehouse with analytics views" >> $GITHUB_STEP_SUMMARY
          echo "- RESTful API with advanced endpoints" >> $GITHUB_STEP_SUMMARY
          echo "- Master automation controller" >> $GITHUB_STEP_SUMMARY
          echo "- Enhanced data consolidation pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- Data quality metrics and validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "data/latest/summary.json" ]; then
            echo "**Status**: Enterprise automation completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status**: Automation completed with warnings" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Commit Enterprise Results
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "TeaTrade Enterprise System"
          
          git add data/latest/
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Enterprise automation update $(date -u '+%Y-%m-%d %H:%M UTC')

            Features: PostgreSQL database, RESTful API, analytics views
            Mode: ${{ github.event.inputs.run_mode || 'scheduled' }}
            System: Enterprise-grade with full data warehouse"
            git push
            echo "Enterprise results committed successfully"
          fi
