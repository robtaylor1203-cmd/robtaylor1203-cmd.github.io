name: Complete Tea Trade Automation - Production

on:
  # Daily automation at 6 AM UTC
  schedule:
    - cron: '0 6 * * *'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if recent data exists'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  tea-automation:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: secure_password_123
          POSTGRES_USER: tea_admin
          POSTGRES_DB: tea_trade_data
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    env:
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: tea_admin
      PGPASSWORD: secure_password_123
      PGDATABASE: tea_trade_data
    
    steps:
      - name: 🛒 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 📦 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            tesseract-ocr \
            tesseract-ocr-eng \
            postgresql-client \
            chromium-browser
      
      - name: 📋 Install Python dependencies
        run: |
          pip install -r automation_requirements.txt
          playwright install chromium --with-deps
      
      - name: 🗄️ Initialize database
        run: |
          until pg_isready; do sleep 1; done
          psql -f fix_database_schema.sql
          echo "✅ Database initialized"
      
      - name: 🏥 System health check
        run: |
          echo "🏥 Performing system health check..."
          free -h
          df -h
          psql -c "SELECT 'Database connected successfully';"
          python --version
          python -c "import requests, psycopg2, pandas; print('✅ Dependencies OK')"
      
      - name: 🚀 Run complete automation
        run: |
          echo "🚀 Starting complete tea market automation..."
          cd automation
          python master_automation_complete.py
      
      - name: 📊 Generate execution report
        if: always()
        run: |
          echo "📊 Generating execution report..."
          
          # Get latest data summary
          auction_summary=$(psql -t -c "
            SELECT 
              source || ': ' || COUNT(*) || ' lots (' || 
              COUNT(CASE WHEN scrape_timestamp >= CURRENT_DATE THEN 1 END) || ' today)'
            FROM auction_lots 
            GROUP BY source
            ORDER BY COUNT(*) DESC;
          " | head -6)
          
          news_summary=$(psql -t -c "
            SELECT COUNT(*) || ' total articles (' ||
            COUNT(CASE WHEN scrape_timestamp >= CURRENT_DATE THEN 1 END) || ' today)'
            FROM news_articles;
          ")
          
          # Create execution report
          cat > EXECUTION_REPORT.md << EOF
          # 🍃 Tea Trade Automation Report
          
          **Execution Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Status**: Automation Complete
          **Next Run**: $(date -u -d '+1 day' '+%Y-%m-%d 06:00 UTC')
          
          ## 📊 Data Collection Summary
          
          ### Auction Data
          $auction_summary
          
          ### News Data
          $news_summary
          
          ## 🌐 Website Status
          - **Live Data**: Updated with latest market information
          - **Charts**: Price trends and volume analysis
          - **News Feed**: Recent industry updates
          - **API**: All endpoints operational
          
          ## 🚀 System Health
          - **Database**: Operational
          - **Scrapers**: 6 sources active
          - **Automation**: Daily at 06:00 UTC
          - **Website**: teatrade.co.uk (when connected)
          
          ---
          *Automated report generated by Tea Trade Bot*
          EOF
          
          echo "✅ Execution report generated"
      
      - name: 🎨 Verify website updates
        run: |
          echo "🎨 Verifying website updates..."
          
          # Check if data files exist and are valid
          if [ -d "data/latest" ]; then
            echo "📁 Data directory exists"
            ls -la data/latest/
            
            # Validate JSON files
            for file in data/latest/*.json; do
              if [ -f "$file" ]; then
                if python -m json.tool "$file" > /dev/null 2>&1; then
                  echo "✅ $file is valid JSON"
                else
                  echo "❌ $file is invalid JSON"
                fi
              fi
            done
          else
            echo "⚠️ Data directory not found"
          fi
          
          # Check if website has been updated
          if grep -q "Last automated update:" index.html; then
            echo "✅ Website timestamp updated"
          else
            echo "⚠️ Website timestamp not found"
          fi
      
      - name: 🌐 Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/deploy-pages@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          artifact_name: github-pages
          
      - name: 📤 Upload Pages artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v2
        with:
          path: '.'
      
      - name: 🎉 Final summary
        if: always()
        run: |
          echo "🎉 Tea Trade Automation Complete!"
          echo ""
          echo "📊 Latest Statistics:"
          psql -c "
            SELECT 
              'Total Sources: ' || COUNT(DISTINCT source) as metric
            FROM auction_lots
            UNION ALL
            SELECT 
              'Total Lots: ' || COUNT(*) as metric
            FROM auction_lots
            UNION ALL
            SELECT 
              'Today Lots: ' || COUNT(*) as metric
            FROM auction_lots
            WHERE scrape_timestamp >= CURRENT_DATE;
          "
          echo ""
          echo "🌐 Your TeaTrade website is live with fresh data!"
          echo "🔄 Next automation: $(date -u -d '+1 day' '+%Y-%m-%d 06:00 UTC')"

  # Cleanup old workflow runs
  cleanup:
    runs-on: ubuntu-latest
    needs: tea-automation
    if: always()
    
    steps:
      - name: 🧹 Clean up old workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 3
